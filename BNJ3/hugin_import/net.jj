/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. net.jj */
/*@egen*/
options {
  JAVA_UNICODE_ESCAPE =true;                                           
  LOOKAHEAD=1;                      
}

PARSER_BEGIN(NetParser)
import java.util.*;
import java.io.*;
import edu.ksu.cis.bnj.ver3.streams.*;

public class NetParser/*@bgen(jjtree)*/implements NetParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTNetParserState jjtree = new JJTNetParserState();

/*@egen*/
	public static final int FORMATv6_0 = 0;
	public static final int FORMATv5_7 = 1;
	public static final int FORMAT_DEFAULT = 0;
	private static ArrayList _NodeList;
	private static ArrayList _EdgeList;
	private static OmniFormatV1 _Write;

	public static int saveFormat = FORMAT_DEFAULT;
//	protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$


    private static void unfold(List in, List out)
    {
	for(Iterator itIn = in.iterator(); itIn.hasNext(); )
	{
		Object o = itIn.next();
		if(o instanceof List)
		{
			unfold((List)o,out);
		}
		else
		{
			out.add(o);
		}
	}
    }
    private static void compile()
    {
	TreeMap nodeIdxCache = new TreeMap();

	_Write.Start();
	_Write.CreateBeliefNetwork(0);
    _Write.SetBeliefNetworkName(0, "network name goes here");
	
	int cnt = 0;
	for(Iterator itNode = _NodeList.iterator(); itNode.hasNext(); )
	{
		TreeMap node = (TreeMap) itNode.next();
		String name = (String) node.get("name");
		if(name == null)
			name = (String)  node.get("label");
		if(name == null)
			name = "unknown";
		boolean cont = false;
		String dom = (String) node.get("domain");
		if(dom != null)
			cont = (dom).trim().toLowerCase().equals("continuous");

		_Write.BeginBeliefNode(cnt);
		_Write.SetBeliefNodeName(name);

		List pos = (List) node.get("position");
		if(pos != null)
		{
			Iterator PIT = pos.iterator();
			Double x = (Double) PIT.next();
			Double y = (Double) PIT.next();
			_Write.SetBeliefNodePosition((int)(x.doubleValue()),(int)(y.doubleValue()));
		}
		if(cont)
		{
			_Write.MakeContinuous(name);
		}
		else
		{
			String type = (String) node.get("type");
			boolean desc = false, utility = false;
			if(type != null)
			{
				desc = (type).trim().toLowerCase().equals("decision");
				utility = (type).trim().toLowerCase().equals("utility");
			}
			if(desc)
			{
				_Write.SetType("decision");
			} else if(utility)
			{
				_Write.SetType("utility");
			} else
			{
				LinkedList outcomes = (LinkedList) node.get("states");
				for(Iterator o = outcomes.iterator(); o.hasNext(); )
				{
					String come = (String) o.next();
					_Write.BeliefNodeOutcome(come);
				}
			}
		}
		_Write.EndBeliefNode();
		nodeIdxCache.put(name, new Integer(cnt));

		cnt++;
	}

	for(Iterator itEdge = _EdgeList.iterator(); itEdge.hasNext(); )
	{
		TreeMap EdgeInfo = (TreeMap) itEdge.next();
		String node = (String) EdgeInfo.get("node");
		int Idx = ((Integer) nodeIdxCache.get(node)).intValue();
		List parents = (List) EdgeInfo.get("parents");
		for(Iterator itPar = parents.iterator(); itPar.hasNext(); )
		{
			String par = (String) itPar.next();
			int pdx = ((Integer) nodeIdxCache.get(par)).intValue();
			_Write.Connect(pdx,Idx);
		}
	}
	
	for(Iterator itEdge = _EdgeList.iterator(); itEdge.hasNext(); )
	{
		TreeMap EdgeInfo = (TreeMap) itEdge.next();
		String node = (String) EdgeInfo.get("node");
		int Idx = ((Integer) nodeIdxCache.get(node)).intValue();
		List data = new LinkedList();
		unfold((List) EdgeInfo.get("data"),data);

		_Write.BeginCPF(Idx);

		for(Iterator itData = data.iterator(); itData.hasNext(); )
		{
			Object o = itData.next();
			_Write.ForwardFlat_CPFWriteValue(o.toString());
		}
		_Write.EndCPF();
	}

	_Write.Finish();
    }
    public NetParser()
    {
        // Do nothing, just to provide a stub
	_NodeList = new ArrayList();
	_EdgeList = new ArrayList();
    }

	public void load(InputStream r) throws ParseException
	{
        new NetParser(r).CompilationUnit();
        System.gc();
	}

     public static void load(String filename, OmniFormatV1 write)
     {
	_Write = write;
     	try
		{
        _Write = write;
        new NetParser().load(new FileInputStream(filename));
     	}
     	catch (Exception e)
        {
        	System.out.println("nope?");
			String message = "";
			StackTraceElement[] ste = e.getStackTrace();
			message += e.getMessage() + "\n\n";
			message += e + "\n";
			for (int i = 0; i < ste.length; i++)
			{
				message += ste[i].getFileName() + "[" + ste[i].getLineNumber() + "] ~ " + ste[i].getClassName() + "::"
						+ ste[i].getMethodName() + "\n";
				//				System.out.println(e.getMessage());
			}
			
			System.out.println(message);

        }

     }

     public static void load(InputStream stream, OmniFormatV1 write)
     {
	_Write = write;
     	try
		{
        _Write = write;
        new NetParser().load(stream);
     	}
     	catch (Exception e)
        {
        	System.out.println("nope?");
			String message = "";
			StackTraceElement[] ste = e.getStackTrace();
			message += e.getMessage() + "\n\n";
			message += e + "\n";
			for (int i = 0; i < ste.length; i++)
			{
				message += ste[i].getFileName() + "[" + ste[i].getLineNumber() + "] ~ " + ste[i].getClassName() + "::"
						+ ste[i].getMethodName() + "\n";
				//				System.out.println(e.getMessage());
			}
			
			System.out.println(message);
        }

     }

     public static void main (String [] args) {
        try {
	    _Write = new OmniFormatV1_Console();
            if (args.length == 0)
            {
                System.out.println("Hugin .net Parser:  Reading from standard input");
                new NetParser().load(System.in);
            } else if (args.length == 1)
            {
                System.out.println("Hugin .net Parser:  Reading from file " + args[0]);
                new NetParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e)
        {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

}


PARSER_END(NetParser)


/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */

MORE :
{
 "%" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < CLASS: "class" >
| < NET: "net" >
| < NODE: "node" >
| < POTENTIAL: "potential" >
| < LABEL: "label" >
| < POSITION: "position" >
| < STATES: "states" >
| < DATA: "data" >
| < NORMAL: "normal" >
| < INPUTS: "inputs" >
| < OUTPUTS: "outputs" >
| < NODE_SIZE: "node_size" >
| < CONTINUOUS: "continuous" >
| < DISCRETE: "discrete" >
| < SUBTYPE: "subtype" >
| < UTILITY: "utility" >
| < DECISION: "decision" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
      ( <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
      )
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
      ( (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
      )
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL: "'" > : CHAR_LIT
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* Character Literal mangling to help coding */
<CHAR_LIT> MORE:
{
    "\\" : ESCAPED_CHAR_LIT
  | <NON_ESCAPED_LITERAL: (~["'","\\","\n","\r"])> : CHAR_LIT_CLOSE

}

<ESCAPED_CHAR_LIT> MORE:
{
  < ESCAPE_SEQ: ["n","t","b","r","f","\\","'","\""] >
  {
      char ch = image.charAt(image.length()-1);
      switch (ch)
      {
          case 'n' : image = new StringBuffer("\n"); break; // $NON-NLS-1$
          case 't' : image = new StringBuffer("\t"); break; // $NON-NLS-1$
          case 'b' : image = new StringBuffer("\b"); break; // $NON-NLS-1$
          case 'r' : image = new StringBuffer("\r"); break; // $NON-NLS-1$
          case 'f' : image = new StringBuffer("\f"); break; // $NON-NLS-1$
          case '\\': image = new StringBuffer("\\"); break; // $NON-NLS-1$
          case '\'': image = new StringBuffer("'"); break; // $NON-NLS-1$
          case '\"': image = new StringBuffer("\""); break; // $NON-NLS-1$
          default: System.out.println("Warning: Unknown token parsed on "+image.toString());
      }
  } : CHAR_LIT_CLOSE
| < ESCAPE_OCTAL: (["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"]) >
  {
      char ch_octal = (char) Integer.parseInt(image.substring(1),8);
      image = new StringBuffer(String.valueOf(ch_octal));
  } : CHAR_LIT_CLOSE
| < ESCAPE_UNICODE: "u" ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
                         ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]>
  {
      char ch_uni = (char) Integer.parseInt(image.substring(1),16);
      image = new StringBuffer(String.valueOf(ch_uni));
  } : CHAR_LIT_CLOSE
}

<CHAR_LIT_CLOSE> MORE:
{
  "'" : DEFAULT
}
/* Character Literal mangling end */

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < SC_XOR: "^^" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < BIT_XOR: "^" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < TOWARD: "->" >
| < ASG_OPR: "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" >
}


/**********************************************
 * THE HUGIN NET LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/

void CompilationUnit() :
{/*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CompilationUnit */
  try {
/*@egen*/
  (  Formatv6_0() |  Formatv5_7() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Formatv6_0() :
{/*@bgen(jjtree) Formatv6_0 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMATV6_0);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ 
  Token t = null;
  String name;
  TreeMap property;
}
{/*@bgen(jjtree) Formatv6_0 */
    try {
/*@egen*/
    ( "class" t=<IDENTIFIER> { name =  t.image; } ) "{" property = GraphProperties() 
    ( Node() | Edge() )+
    "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	compile();
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Formatv5_7() :
{/*@bgen(jjtree) Formatv5_7 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMATV5_7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  TreeMap property;
}
{/*@bgen(jjtree) Formatv5_7 */
   try {
/*@egen*/
   "net" "{" property = GraphProperties() "}"
    ( Node() | Edge() )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
	compile();
    }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Node()       :
{
    Token t = null;

    LinkedList list = null;
    String contents, label = null, name;
    String strLabel = null;
    String strName = null;
    TreeMap _node = new TreeMap();
}
{
    [   "continuous" { _node.put("domain","continuous"); } 
      | "discrete"   { _node.put("domain","discrete"); } 
    ]

    
    (   "node"     { _node.put("type","chance"); }
      | "decision" { _node.put("type","decision");}
      | "utility"  { _node.put("type","utility"); }
    )
    
    t = <IDENTIFIER> "{" { _node.put("name",t.image.trim()); }
    (
     (
       ( "label" "=" label = StringLiteral() {	_node.put("label",label);  }
       )
     |
       ( "position" "=" list = NumberList()
         {	_node.put("position", list);	 }
       )
     |
       ( "subtype" "=" t = <IDENTIFIER>
         {	_node.put("subtype", t.image);	 }
       )
     |
       ( "states" "=" list = StringList() )
         {
	     _node.put("states", list);
         }
     | ( t = <IDENTIFIER> "=" contents = StringLiteral()
         {
		System.out.println("unused property - discarded" + t.image);
         }
       )
     ) ";"
    )+
    "}"
    {
	_NodeList.add(_node);
    }
}

void Edge()       :
{
    TreeMap EdgeInfo = new TreeMap();
    LinkedList parentList = new LinkedList();
    List data = null;
    Token t;
}
{
    "potential" "(" ( t = <IDENTIFIER> { EdgeInfo.put("node",t.image.trim()); } )+
              [ "|" ( t = <IDENTIFIER> { parentList.add(t.image); } )* ] ")" "{"
              [ "data" "=" data = NestedNumberList() ";" ]
    "}"
     {
	EdgeInfo.put("parents",parentList);
	EdgeInfo.put("data",data);
	_EdgeList.add(EdgeInfo);
     /*
         for (Iterator _i = nodeList.iterator(); _i.hasNext(); )
         {
             Object nodeString = _i.next();
             if (edgeCache.get(nodeString) != null)
             {
                  throw new RuntimeException("Duplicated data definition and parents of node "+ nodeString);
             }
             edgeCache.put(nodeString, new Object[] { parentList, data } );
         }
         */
     }
}

LinkedList NestedNumberList()       :
{
    LinkedList list = new LinkedList();
    List output = null;
}
{
   (  LOOKAHEAD(2)
       output = NumberOrFuncList()
       { list.addAll(output); }
    | LOOKAHEAD(2)
       "(" ( output = NestedNumberList()
             { list.add(output); }
           )+ 
       ")"
    )

    {
        return list;
    }
}

TreeMap GraphProperties()       :
{
  Token t;
  String contents;
  LinkedList list;
  TreeMap property = new TreeMap();
}
{
     ((
       ( "inputs" "=" list=StringList()
         {
             property.put("inputs", list);
         }
       )
     | ( "outputs" "=" list=StringList()
         {
             property.put("outputs", list);
         }
       )
     | ( "node_size" "=" list=NumberList()
         {
             property.put("node_size", list);
         }
       )
     | ( "label" "=" contents=StringLiteral()
         {
             property.put("label", contents);
         }
       )
     | ( t = <IDENTIFIER> "=" contents = StringLiteral()
         {
             property.put(t.image, contents);
         }
       )
     ) ";" )*
     {
         return property;
     }
}

String StringLiteral()       :
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {
		return t.image.substring(1, t.image.length()-1);
    }
}


String Expr()       :
{ String e1 = null, e2 = null; }
{
  ( e1 = MulDivExpr()
    ( "+" e2 = MulDivExpr() { e1 = e1 + "+" + e2; }
    | "-" e2 = MulDivExpr() { e1 = e1 + "-" + e2; } )*
  )
  { return e1; }
}

String MulDivExpr()       :
{ String e1 = null, e2 = null; }
{
  ( e1 = PowExpr()
    ( "*" e2 = PowExpr() { e1 = e1 + "*" + e2; }
    | "/" e2 = PowExpr() { e1 = e1 + "/" + e2; }
    )*
  )
  { return e1; }
}

String PowExpr()       :
{ String e1 = null, e2 = null; }
{
  ( e1 = UnaryExpr() ( "^" e2 = UnaryExpr() { e1 = e1 + "^" + e2; } )* )
  { return e1; }
}

String UnaryExpr()       :
{
   String e = null;
   double d = 0.0;
   Token t = null;
}
{ (
    "+" e = UnaryExpr()
  | "-" e = UnaryExpr() { e = "-" + e; }
  | "(" e = Expr() ")"
  | d = NumberLiteral() { e = "" + d; }
  | t = <IDENTIFIER> { e = t.image; }
  )
  { return e; }
}

LinkedList StringList()       :
{
    LinkedList list = new LinkedList();
    String s;
}
{
    "(" (s = StringLiteral() { list.add(s); })* ")"
    {
       return list;
    }
}

double NumberLiteral()       :
{	Token t;	}
{	( t = <FLOATING_POINT_LITERAL> | t = <INTEGER_LITERAL> )
	{
	    return Double.parseDouble(t.image);
	}
}



LinkedList NumberOrFuncList()       :
{
    LinkedList list = new LinkedList();
    double number;
    String e1, e2;
    int sgn = 1;
}
{
    "(" ( ( [ "-" { sgn = -1; } ] number = NumberLiteral()
            { list.add(new Double(sgn*number)); sgn = 1; }
          | "normal" "(" e1 = Expr() "," e2 = Expr() ")"
            {
	            throw new RuntimeException("We don't know how to handle continuous nodes yet!");
            }
          )
        )* 
     ")"
    {
       return list;
    }
}


LinkedList NumberList()       :
{
    LinkedList list = new LinkedList();
    double number;
    int sgn = 1;
}
{
    "(" ( [ "-" { sgn = -1; } ] number = NumberLiteral()
        { list.add( new Double(sgn*number) ); sgn = 1; } )* ")"
    {
       return list;
    }
}
