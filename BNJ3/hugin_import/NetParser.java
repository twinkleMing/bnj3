/* Generated By:JJTree&JavaCC: Do not edit this line. NetParser.java */
import java.util.*;
import java.io.*;
import edu.ksu.cis.bnj.ver3.streams.*;

public class NetParser/*@bgen(jjtree)*/implements NetParserTreeConstants, NetParserConstants {/*@bgen(jjtree)*/
  protected static JJTNetParserState jjtree = new JJTNetParserState();public static final int FORMATv6_0 = 0;
        public static final int FORMATv5_7 = 1;
        public static final int FORMAT_DEFAULT = 0;
        private static ArrayList _NodeList;
        private static ArrayList _EdgeList;
        private static OmniFormatV1 _Write;

        public static int saveFormat = FORMAT_DEFAULT;
//	protected static String ln = System.getProperty("line.separator"); // $NON-NLS-1$


    private static void unfold(List in, List out)
    {
        for(Iterator itIn = in.iterator(); itIn.hasNext(); )
        {
                Object o = itIn.next();
                if(o instanceof List)
                {
                        unfold((List)o,out);
                }
                else
                {
                        out.add(o);
                }
        }
    }
    private static void compile()
    {
        TreeMap nodeIdxCache = new TreeMap();

        _Write.Start();
        _Write.CreateBeliefNetwork(0);
    _Write.SetBeliefNetworkName(0, "network name goes here");

    	TreeMap nodeTypeCache = new TreeMap();
        int cnt = 0;
        for(Iterator itNode = _NodeList.iterator(); itNode.hasNext(); )
        {
                TreeMap node = (TreeMap) itNode.next();
                String name = (String) node.get("name");
                if(name == null)
                        name = (String)  node.get("label");
                if(name == null)
                        name = "unknown";
                boolean cont = false;
                String dom = (String) node.get("domain");
                if(dom != null)
                        cont = (dom).trim().toLowerCase().equals("continuous");

                _Write.BeginBeliefNode(cnt);
                _Write.SetBeliefNodeName(name);

                List pos = (List) node.get("position");
                if(pos != null)
                {
                        Iterator PIT = pos.iterator();
                        Double x = (Double) PIT.next();
                        Double y = (Double) PIT.next();
                        _Write.SetBeliefNodePosition((int)(x.doubleValue()),(int)(y.doubleValue()));
                }
                if(cont)
                {
                        _Write.MakeContinuous(name);
                }
                else
                {
                        String type = (String) node.get("type");
                        nodeTypeCache.put(name, type);
                        boolean desc = false, utility = false;
                        if(type != null)
                        {
                                desc = (type).trim().toLowerCase().equals("decision");
                                utility = (type).trim().toLowerCase().equals("utility");
                        }
                        if(desc)
                        {
                                _Write.SetType("decision");
                                LinkedList outcomes = (LinkedList) node.get("states");
                                for(Iterator o = outcomes.iterator(); o.hasNext(); )
                                {
                                        String come = (String) o.next();
                                        _Write.BeliefNodeOutcome(come);
                                }
                        } else if(utility)
                        {
                                _Write.SetType("utility");
                                _Write.BeliefNodeOutcome("v");
                        } else
                        {
                        		_Write.SetType("chance");
                                LinkedList outcomes = (LinkedList) node.get("states");
                                for(Iterator o = outcomes.iterator(); o.hasNext(); )
                                {
                                        String come = (String) o.next();
                                        _Write.BeliefNodeOutcome(come);
                                }
                        }
                }
                _Write.EndBeliefNode();
                nodeIdxCache.put(name, new Integer(cnt));

                cnt++;
        }

        for(Iterator itEdge = _EdgeList.iterator(); itEdge.hasNext(); )
        {
                TreeMap EdgeInfo = (TreeMap) itEdge.next();
                String node = (String) EdgeInfo.get("node");
                int Idx = ((Integer) nodeIdxCache.get(node)).intValue();
                List parents = (List) EdgeInfo.get("parents");
                for(Iterator itPar = parents.iterator(); itPar.hasNext(); )
                {
                        String par = (String) itPar.next();
                        int pdx = ((Integer) nodeIdxCache.get(par)).intValue();
                        _Write.Connect(pdx,Idx);
                }
        }

        for(Iterator itEdge = _EdgeList.iterator(); itEdge.hasNext(); )
        {
                TreeMap EdgeInfo = (TreeMap) itEdge.next();
                String node = (String) EdgeInfo.get("node");
                int Idx = ((Integer) nodeIdxCache.get(node)).intValue();
                List data = new LinkedList();
                try
				{
                	unfold((List) EdgeInfo.get("data"),data);
				}
                catch (Exception e)
				{
                	// got no data, thats fin
				}

                if(data.size() > 0)
                {
                _Write.BeginCPF(Idx);
                for(Iterator itData = data.iterator(); itData.hasNext(); )
                {
                        Object o = itData.next();
                        _Write.ForwardFlat_CPFWriteValue(o.toString());
                }
                _Write.EndCPF();
                }
        }

        _Write.Finish();
    }
    public NetParser()
    {
        // Do nothing, just to provide a stub
        _NodeList = new ArrayList();
        _EdgeList = new ArrayList();
    }

        public void load(InputStream r) throws ParseException
        {
        new NetParser(r).CompilationUnit();
        System.gc();
        }

     public static void load(String filename, OmniFormatV1 write)
     {
        _Write = write;
        try
                {
        _Write = write;
        new NetParser().load(new FileInputStream(filename));
        }
        catch (Exception e)
        {
                System.out.println("nope?");
                        String message = "";
                        StackTraceElement[] ste = e.getStackTrace();
                        message += e.getMessage() + "\n\n";
                        message += e + "\n";
                        for (int i = 0; i < ste.length; i++)
                        {
                                message += ste[i].getFileName() + "[" + ste[i].getLineNumber() + "] ~ " + ste[i].getClassName() + "::"
                                                + ste[i].getMethodName() + "\n";
                                //				System.out.println(e.getMessage());
                        }

                        System.out.println(message);

        }

     }

     public static void load(InputStream stream, OmniFormatV1 write)
     {
        _Write = write;
        try
                {
        _Write = write;
        new NetParser().load(stream);
        }
        catch (Exception e)
        {
                System.out.println("nope?");
                        String message = "";
                        StackTraceElement[] ste = e.getStackTrace();
                        message += e.getMessage() + "\n\n";
                        message += e + "\n";
                        for (int i = 0; i < ste.length; i++)
                        {
                                message += ste[i].getFileName() + "[" + ste[i].getLineNumber() + "] ~ " + ste[i].getClassName() + "::"
                                                + ste[i].getMethodName() + "\n";
                                //				System.out.println(e.getMessage());
                        }

                        System.out.println(message);
        }

     }

     public static void main (String [] args) {
        try {
            _Write = new OmniFormatV1_Console();
            if (args.length == 0)
            {
                System.out.println("Hugin .net Parser:  Reading from standard input");
                new NetParser().load(System.in);
            } else if (args.length == 1)
            {
                System.out.println("Hugin .net Parser:  Reading from file " + args[0]);
                new NetParser().load(new FileInputStream(args[0]));
            }
        } catch (Exception e)
        {
            System.out.println(e.getMessage());
            System.out.println("Error!");
        }
    }

/**********************************************
 * THE HUGIN NET LANGUAGE GRAMMAR STARTS HERE *
 **********************************************/
  static final public void CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        Formatv6_0();
        break;
      case NET:
        Formatv5_7();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Formatv6_0() throws ParseException {
 /*@bgen(jjtree) Formatv6_0 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMATV6_0);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  String name;
  TreeMap property;
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
                               name =  t.image;
      jj_consume_token(LBRACE);
      property = GraphProperties();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NODE:
        case CONTINUOUS:
        case DISCRETE:
        case UTILITY:
        case DECISION:
          Node();
          break;
        case POTENTIAL:
          Edge();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NODE:
        case POTENTIAL:
        case CONTINUOUS:
        case DISCRETE:
        case UTILITY:
        case DECISION:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        compile();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Formatv5_7() throws ParseException {
 /*@bgen(jjtree) Formatv5_7 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMATV5_7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TreeMap property;
    try {
      jj_consume_token(NET);
      jj_consume_token(LBRACE);
      property = GraphProperties();
      jj_consume_token(RBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NODE:
        case CONTINUOUS:
        case DISCRETE:
        case UTILITY:
        case DECISION:
          Node();
          break;
        case POTENTIAL:
          Edge();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NODE:
        case POTENTIAL:
        case CONTINUOUS:
        case DISCRETE:
        case UTILITY:
        case DECISION:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        compile();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Node() throws ParseException {
    Token t = null;

    LinkedList list = null;
    String contents, label = null, name;
    String strLabel = null;
    String strName = null;
    TreeMap _node = new TreeMap();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTINUOUS:
    case DISCRETE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUOUS:
        jj_consume_token(CONTINUOUS);
                       _node.put("domain","continuous");
        break;
      case DISCRETE:
        jj_consume_token(DISCRETE);
                       _node.put("domain","discrete");
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NODE:
      jj_consume_token(NODE);
                     _node.put("type","chance");
      break;
    case DECISION:
      jj_consume_token(DECISION);
                     _node.put("type","decision");
      break;
    case UTILITY:
      jj_consume_token(UTILITY);
                     _node.put("type","utility");
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
                           _node.put("name",t.image.trim());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        jj_consume_token(LABEL);
        jj_consume_token(ASSIGN);
        label = StringLiteral();
                                                _node.put("label",label);
        break;
      case POSITION:
        jj_consume_token(POSITION);
        jj_consume_token(ASSIGN);
        list = NumberList();
                _node.put("position", list);
        break;
      case SUBTYPE:
        jj_consume_token(SUBTYPE);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(IDENTIFIER);
                _node.put("subtype", t.image);
        break;
      case STATES:
        jj_consume_token(STATES);
        jj_consume_token(ASSIGN);
        list = StringList();
             _node.put("states", list);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(ASSIGN);
        contents = StringLiteral();
                System.out.println("unused property - discarded" + t.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
      case POSITION:
      case STATES:
      case SUBTYPE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RBRACE);
        _NodeList.add(_node);
  }

  static final public void Edge() throws ParseException {
    TreeMap EdgeInfo = new TreeMap();
    LinkedList parentList = new LinkedList();
    List data = null;
    Token t;
    jj_consume_token(POTENTIAL);
    jj_consume_token(LPAREN);
    label_4:
    while (true) {
      t = jj_consume_token(IDENTIFIER);
                                         EdgeInfo.put("node",t.image.trim());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_OR:
      jj_consume_token(BIT_OR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(IDENTIFIER);
                                         parentList.add(t.image);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATA:
      jj_consume_token(DATA);
      jj_consume_token(ASSIGN);
      data = NestedNumberList();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
        EdgeInfo.put("parents",parentList);
        EdgeInfo.put("data",data);
        _EdgeList.add(EdgeInfo);
     /*
         for (Iterator _i = nodeList.iterator(); _i.hasNext(); )
         {
             Object nodeString = _i.next();
             if (edgeCache.get(nodeString) != null)
             {
                  throw new RuntimeException("Duplicated data definition and parents of node "+ nodeString);
             }
             edgeCache.put(nodeString, new Object[] { parentList, data } );
         }
         */

  }

  static final public LinkedList NestedNumberList() throws ParseException {
    LinkedList list = new LinkedList();
    List output = null;
    if (jj_2_1(2)) {
      output = NumberOrFuncList();
         list.addAll(output);
    } else if (jj_2_2(2)) {
      jj_consume_token(LPAREN);
      label_6:
      while (true) {
        output = NestedNumberList();
               list.add(output);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeMap GraphProperties() throws ParseException {
  Token t;
  String contents;
  LinkedList list;
  TreeMap property = new TreeMap();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
      case INPUTS:
      case OUTPUTS:
      case NODE_SIZE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUTS:
        jj_consume_token(INPUTS);
        jj_consume_token(ASSIGN);
        list = StringList();
             property.put("inputs", list);
        break;
      case OUTPUTS:
        jj_consume_token(OUTPUTS);
        jj_consume_token(ASSIGN);
        list = StringList();
             property.put("outputs", list);
        break;
      case NODE_SIZE:
        jj_consume_token(NODE_SIZE);
        jj_consume_token(ASSIGN);
        list = NumberList();
             property.put("node_size", list);
        break;
      case LABEL:
        jj_consume_token(LABEL);
        jj_consume_token(ASSIGN);
        contents = StringLiteral();
             property.put("label", contents);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(ASSIGN);
        contents = StringLiteral();
             property.put(t.image, contents);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    }
         {if (true) return property;}
    throw new Error("Missing return statement in function");
  }

  static final public String StringLiteral() throws ParseException {
    Token t;
    t = jj_consume_token(STRING_LITERAL);
                {if (true) return t.image.substring(1, t.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

  static final public String Expr() throws ParseException {
  String e1 = null, e2 = null;
    e1 = MulDivExpr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = MulDivExpr();
                              e1 = e1 + "+" + e2;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = MulDivExpr();
                              e1 = e1 + "-" + e2;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String MulDivExpr() throws ParseException {
  String e1 = null, e2 = null;
    e1 = PowExpr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        e2 = PowExpr();
                           e1 = e1 + "*" + e2;
        break;
      case SLASH:
        jj_consume_token(SLASH);
        e2 = PowExpr();
                           e1 = e1 + "/" + e2;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String PowExpr() throws ParseException {
  String e1 = null, e2 = null;
    e1 = UnaryExpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_XOR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      jj_consume_token(BIT_XOR);
      e2 = UnaryExpr();
                                              e1 = e1 + "^" + e2;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryExpr() throws ParseException {
   String e = null;
   double d = 0.0;
   Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      e = UnaryExpr();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e = UnaryExpr();
                          e = "-" + e;
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e = Expr();
      jj_consume_token(RPAREN);
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      d = NumberLiteral();
                          e = "" + d;
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       e = t.image;
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList StringList() throws ParseException {
    LinkedList list = new LinkedList();
    String s;
    jj_consume_token(LPAREN);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      s = StringLiteral();
                               list.add(s);
    }
    jj_consume_token(RPAREN);
       {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public double NumberLiteral() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList NumberOrFuncList() throws ParseException {
    LinkedList list = new LinkedList();
    double number;
    String e1, e2;
    int sgn = 1;
    jj_consume_token(LPAREN);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NORMAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case MINUS:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          jj_consume_token(MINUS);
                    sgn = -1;
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        number = NumberLiteral();
              list.add(new Double(sgn*number)); sgn = 1;
        break;
      case NORMAL:
        jj_consume_token(NORMAL);
        jj_consume_token(LPAREN);
        e1 = Expr();
        jj_consume_token(COMMA);
        e2 = Expr();
        jj_consume_token(RPAREN);
                    {if (true) throw new RuntimeException("We don't know how to handle continuous nodes yet!");}
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
       {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList NumberList() throws ParseException {
    LinkedList list = new LinkedList();
    double number;
    int sgn = 1;
    jj_consume_token(LPAREN);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case MINUS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
                  sgn = -1;
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      number = NumberLiteral();
          list.add( new Double(sgn*number) ); sgn = 1;
    }
    jj_consume_token(RPAREN);
       {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_scan_token(NORMAL)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public NetParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x600,0x3601800,0x3601800,0x3601800,0x3601800,0x600000,0x600000,0x3000800,0x80e000,0x80e000,0x0,0x0,0x0,0x10000,0x0,0x1c2000,0x1c2000,0x0,0x0,0x0,0x0,0x0,0x44000000,0x0,0x44000000,0x44020000,0x0,0x44020000,0x44000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x100,0x100,0x0,0x0,0x800,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x900,0x2,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x30,0x30,0xc0,0xc0,0x400,0x30,0x0,0x0,0x20,0x20,0x20,0x20,0x20,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public NetParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new NetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public NetParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new NetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public NetParser(NetParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(NetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[91];
    for (int i = 0; i < 91; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 91; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
